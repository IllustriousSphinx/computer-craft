-- ComputerCraft Chest Transfer UI
-- Advanced UI for viewing and managing chest inventories

-- Load configuration
local config = {}
if fs.exists("chest_config.lua") then
    local configFile = fs.open("chest_config.lua", "r")
    local configCode = configFile.readAll()
    configFile.close()
    local configFunc = load(configCode)
    if configFunc then
        config = configFunc() or {}
    end
end

-- Configuration
local SOURCE_DIRECTION = config.source or "left"
local DEST_DIRECTION = config.dest or "right"

-- UI State
local currentView = "main" -- main, source, dest, extract
local selectedItem = nil
local selectedSlot = nil
local selectedChest = nil
local scrollOffset = 0
local maxDisplayItems = 12

-- Color definitions (using ComputerCraft color constants)
local uiColors = {
    bg = colors.black,
    header = colors.blue,
    text = colors.white,
    highlight = colors.yellow,
    button = colors.green,
    error = colors.red,
    success = colors.lime
}

-- Get terminal dimensions
local w, h = term.getSize()

-- Function to clear screen with background color
local function clearScreen()
    term.setBackgroundColor(uiColors.bg)
    term.setTextColor(uiColors.text)
    term.clear()
    term.setCursorPos(1, 1)
end

-- Function to draw header
local function drawHeader(title)
    term.setBackgroundColor(uiColors.header)
    term.setTextColor(colors.white)
    term.setCursorPos(1, 1)
    term.clearLine()
    
    local padding = math.floor((w - #title) / 2)
    term.setCursorPos(padding, 1)
    term.write(title)
    
    term.setBackgroundColor(uiColors.bg)
    term.setTextColor(uiColors.text)
end

-- Function to get chest peripheral
local function getChest(direction)
    local chest = peripheral.wrap(direction)
    return chest
end

-- Function to get chest info
local function getChestInfo(direction)
    local chest = getChest(direction)
    if not chest then
        return nil, "No chest connected"
    end
    
    local items = chest.list()
    local itemCount = 0
    local totalItems = 0
    
    for slot, item in pairs(items or {}) do
        itemCount = itemCount + 1
        totalItems = totalItems + item.count
    end
    
    return {
        chest = chest,
        items = items or {},
        itemCount = itemCount,
        totalItems = totalItems,
        direction = direction
    }, nil
end

-- Function to format item name for display
local function formatItemName(name, maxLength)
    if not name then return "Unknown Item" end
    
    -- Remove minecraft: prefix if present
    local displayName = name:gsub("^minecraft:", "")
    
    -- Convert underscores to spaces and capitalize
    displayName = displayName:gsub("_", " ")
    displayName = displayName:gsub("(%a)([%w_']*)", function(first, rest)
        return first:upper() .. rest:lower()
    end)
    
    -- Truncate if too long
    if #displayName > maxLength then
        displayName = displayName:sub(1, maxLength - 3) .. "..."
    end
    
    return displayName
end

-- Function to draw button
local function drawButton(x, y, text, selected)
    term.setCursorPos(x, y)
    if selected then
        term.setBackgroundColor(uiColors.highlight)
        term.setTextColor(colors.black)
    else
        term.setBackgroundColor(uiColors.button)
        term.setTextColor(colors.white)
    end
    
    term.write(" " .. text .. " ")
    term.setBackgroundColor(uiColors.bg)
    term.setTextColor(uiColors.text)
end

-- Function to draw inventory list
local function drawInventory(chestInfo, startY)
    if not chestInfo or not chestInfo.items then
        term.setCursorPos(2, startY)
        term.setTextColor(uiColors.error)
        term.write("No chest connected or chest is empty")
        term.setTextColor(uiColors.text)
        return
    end
    
    local items = {}
    for slot, item in pairs(chestInfo.items) do
        table.insert(items, {slot = slot, item = item})
    end
    
    -- Sort items by name
    table.sort(items, function(a, b)
        return (a.item.name or "") < (b.item.name or "")
    end)
    
    local displayCount = math.min(maxDisplayItems, #items - scrollOffset)
    
    for i = 1, displayCount do
        local itemIndex = i + scrollOffset
        if itemIndex <= #items then
            local entry = items[itemIndex]
            local slot = entry.slot
            local item = entry.item
            
            local y = startY + i - 1
            term.setCursorPos(2, y)
            
            -- Format display
            local itemName = formatItemName(item.name, 25)
            local count = item.count or 0
            local line = string.format("%-25s x%d", itemName, count)
            
            -- Highlight if this is a clickable area
            if y >= startY and y < startY + maxDisplayItems then
                term.setTextColor(uiColors.text)
                term.write(line)
                
                -- Show slot number
                term.setCursorPos(w - 8, y)
                term.setTextColor(uiColors.highlight)
                term.write("Slot " .. slot)
                term.setTextColor(uiColors.text)
            end
        end
    end
    
    -- Show scroll indicators
    if scrollOffset > 0 then
        term.setCursorPos(w - 1, startY)
        term.setTextColor(uiColors.highlight)
        term.write("^")
    end
    
    if scrollOffset + maxDisplayItems < #items then
        term.setCursorPos(w - 1, startY + maxDisplayItems - 1)
        term.setTextColor(uiColors.highlight)
        term.write("v")
    end
    
    term.setTextColor(uiColors.text)
end

-- Function to draw main menu
local function drawMainMenu()
    clearScreen()
    drawHeader("Chest Transfer UI")
    
    -- Get chest information
    local sourceInfo, sourceError = getChestInfo(SOURCE_DIRECTION)
    local destInfo, destError = getChestInfo(DEST_DIRECTION)
    
    -- Display chest status
    term.setCursorPos(2, 3)
    term.write("Source Chest (" .. SOURCE_DIRECTION .. "):")
    term.setCursorPos(4, 4)
    if sourceInfo then
        term.setTextColor(uiColors.success)
        term.write("Connected - " .. sourceInfo.itemCount .. " item types, " .. sourceInfo.totalItems .. " total items")
    else
        term.setTextColor(uiColors.error)
        term.write("Error: " .. (sourceError or "Unknown error"))
    end
    
    term.setCursorPos(2, 6)
    term.setTextColor(colors.text)
    term.write("Destination Chest (" .. DEST_DIRECTION .. "):")
    term.setCursorPos(4, 7)
    if destInfo then
        term.setTextColor(uiColors.success)
        term.write("Connected - " .. destInfo.itemCount .. " item types, " .. destInfo.totalItems .. " total items")
    else
        term.setTextColor(uiColors.error)
        term.write("Error: " .. (destError or "Unknown error"))
    end
    
    term.setTextColor(colors.text)
    
    -- Draw buttons
    drawButton(2, 9, "View Source Inventory", false)
    drawButton(2, 11, "View Destination Inventory", false)
    drawButton(2, 13, "Transfer All Items", false)
    drawButton(2, 15, "Configure Settings", false)
    drawButton(2, 17, "Exit", false)
    
    -- Instructions
    term.setCursorPos(2, h - 2)
    term.setTextColor(uiColors.highlight)
    term.write("Click on buttons to navigate, or press keys:")
    term.setCursorPos(2, h - 1)
    term.write("S=Source, D=Dest, T=Transfer, C=Config, Q=Quit")
    term.setTextColor(colors.text)
end

-- Function to draw inventory view
local function drawInventoryView(chestType)
    clearScreen()
    local title = chestType == "source" and "Source Inventory" or "Destination Inventory"
    local direction = chestType == "source" and SOURCE_DIRECTION or DEST_DIRECTION
    
    drawHeader(title .. " (" .. direction .. ")")
    
    local chestInfo, error = getChestInfo(direction)
    
    if chestInfo then
        -- Show summary
        term.setCursorPos(2, 3)
        term.write("Items: " .. chestInfo.itemCount .. " types, " .. chestInfo.totalItems .. " total")
        
        -- Draw inventory
        drawInventory(chestInfo, 5)
        
        -- Instructions
        term.setCursorPos(2, h - 3)
        term.setTextColor(uiColors.highlight)
        term.write("Double-click item to extract | Up/Down arrows to scroll")
        term.setCursorPos(2, h - 2)
        term.write("B=Back | T=Transfer All | Q=Quit")
        term.setTextColor(colors.text)
    else
        term.setCursorPos(2, 5)
        term.setTextColor(uiColors.error)
        term.write("Error: " .. (error or "Unknown error"))
        term.setTextColor(colors.text)
    end
    
    -- Back button
    drawButton(2, h - 5, "Back to Main Menu", false)
end

-- Function to show extraction dialog
local function showExtractionDialog(chestType, slot, item)
    -- Clear area for dialog
    local dialogW = 40
    local dialogH = 8
    local startX = math.floor((w - dialogW) / 2)
    local startY = math.floor((h - dialogH) / 2)
    
    -- Draw dialog box
    term.setBackgroundColor(uiColors.header)
    for y = startY, startY + dialogH - 1 do
        term.setCursorPos(startX, y)
        term.write(string.rep(" ", dialogW))
    end
    
    -- Dialog title
    term.setCursorPos(startX + 2, startY + 1)
    term.setTextColor(colors.white)
    term.write("Extract Items")
    
    -- Item info
    local itemName = formatItemName(item.name, 30)
    term.setCursorPos(startX + 2, startY + 3)
    term.write("Item: " .. itemName)
    term.setCursorPos(startX + 2, startY + 4)
    term.write("Available: " .. item.count)
    
    -- Input prompt
    term.setCursorPos(startX + 2, startY + 5)
    term.write("Extract amount (max " .. item.count .. "):")
    
    -- Input field
    term.setCursorPos(startX + 2, startY + 6)
    term.setBackgroundColor(colors.white)
    term.setTextColor(colors.black)
    term.write(string.rep(" ", 10))
    term.setCursorPos(startX + 2, startY + 6)
    
    -- Get input
    local input = read()
    local amount = tonumber(input)
    
    term.setBackgroundColor(uiColors.bg)
    term.setTextColor(colors.text)
    
    if amount and amount > 0 and amount <= item.count then
        -- Perform extraction
        local sourceDir = chestType == "source" and SOURCE_DIRECTION or DEST_DIRECTION
        local destDir = chestType == "source" and DEST_DIRECTION or SOURCE_DIRECTION
        
        local sourceChest = getChest(sourceDir)
        local destChest = getChest(destDir)
        
        if sourceChest and destChest then
            local transferred = sourceChest.pushItems(peripheral.getName(destChest), slot, amount)
            
            -- Show result
            term.setCursorPos(startX + 2, startY + 7)
            if transferred > 0 then
                term.setTextColor(uiColors.success)
                term.write("Transferred " .. transferred .. " items!")
            else
                term.setTextColor(uiColors.error)
                term.write("Transfer failed!")
            end
            
            sleep(2)
        end
    elseif amount then
        -- Invalid amount
        term.setCursorPos(startX + 2, startY + 7)
        term.setTextColor(uiColors.error)
        term.write("Invalid amount!")
        sleep(2)
    end
end

-- Function to handle mouse clicks
local function handleClick(x, y)
    if currentView == "main" then
        if y == 9 and x >= 2 and x <= 25 then -- View Source
            currentView = "source"
            scrollOffset = 0
        elseif y == 11 and x >= 2 and x <= 30 then -- View Destination
            currentView = "dest"
            scrollOffset = 0
        elseif y == 13 and x >= 2 and x <= 20 then -- Transfer All
            -- Implement transfer all
            local sourceInfo = getChestInfo(SOURCE_DIRECTION)
            if sourceInfo and sourceInfo.chest then
                local destChest = getChest(DEST_DIRECTION)
                if destChest then
                    local transferred = 0
                    for slot, item in pairs(sourceInfo.items) do
                        local moved = sourceInfo.chest.pushItems(peripheral.getName(destChest), slot)
                        transferred = transferred + moved
                    end
                    
                    term.setCursorPos(2, 19)
                    term.setTextColor(uiColors.success)
                    term.write("Transferred " .. transferred .. " items!")
                    term.setTextColor(colors.text)
                    sleep(2)
                end
            end
        elseif y == 15 and x >= 2 and x <= 20 then -- Configure
            shell.run("edit", "chest_config.lua")
        elseif y == 17 and x >= 2 and x <= 8 then -- Exit
            return false
        end
    elseif currentView == "source" or currentView == "dest" then
        if y >= 5 and y < 5 + maxDisplayItems then -- Item click
            local chestType = currentView
            local direction = chestType == "source" and SOURCE_DIRECTION or DEST_DIRECTION
            local chestInfo = getChestInfo(direction)
            
            if chestInfo and chestInfo.items then
                local items = {}
                for slot, item in pairs(chestInfo.items) do
                    table.insert(items, {slot = slot, item = item})
                end
                
                table.sort(items, function(a, b)
                    return (a.item.name or "") < (b.item.name or "")
                end)
                
                local itemIndex = (y - 5) + 1 + scrollOffset
                if itemIndex <= #items then
                    local entry = items[itemIndex]
                    showExtractionDialog(chestType, entry.slot, entry.item)
                end
            end
        elseif y == h - 5 and x >= 2 and x <= 20 then -- Back button
            currentView = "main"
        end
    end
    
    return true
end

-- Function to handle keyboard input
local function handleKey(key)
    if key == keys.q then
        return false
    elseif key == keys.b and (currentView == "source" or currentView == "dest") then
        currentView = "main"
    elseif key == keys.s and currentView == "main" then
        currentView = "source"
        scrollOffset = 0
    elseif key == keys.d and currentView == "main" then
        currentView = "dest"
        scrollOffset = 0
    elseif key == keys.up and (currentView == "source" or currentView == "dest") then
        scrollOffset = math.max(0, scrollOffset - 1)
    elseif key == keys.down and (currentView == "source" or currentView == "dest") then
        scrollOffset = scrollOffset + 1
    elseif key == keys.t then
        -- Transfer all items
        local sourceInfo = getChestInfo(SOURCE_DIRECTION)
        if sourceInfo and sourceInfo.chest then
            local destChest = getChest(DEST_DIRECTION)
            if destChest then
                local transferred = 0
                for slot, item in pairs(sourceInfo.items) do
                    local moved = sourceInfo.chest.pushItems(peripheral.getName(destChest), slot)
                    transferred = transferred + moved
                end
                
                -- Show success message briefly
                term.setCursorPos(2, h - 1)
                term.setTextColor(uiColors.success)
                term.write("Transferred " .. transferred .. " items!")
                term.setTextColor(colors.text)
                sleep(1)
            end
        end
    end
    
    return true
end

-- Main UI loop
local function runUI()
    local lastClickTime = 0
    local lastClickX, lastClickY = 0, 0
    
    while true do
        -- Draw current view
        if currentView == "main" then
            drawMainMenu()
        elseif currentView == "source" then
            drawInventoryView("source")
        elseif currentView == "dest" then
            drawInventoryView("dest")
        end
        
        -- Wait for events
        local event, button, x, y = os.pullEvent()
        
        if event == "mouse_click" then
            local currentTime = os.clock()
            local isDoubleClick = (currentTime - lastClickTime < 0.5) and 
                                 (x == lastClickX) and (y == lastClickY)
            
            if isDoubleClick and (currentView == "source" or currentView == "dest") then
                -- Handle double-click for item extraction
                if y >= 5 and y < 5 + maxDisplayItems then
                    local chestType = currentView
                    local direction = chestType == "source" and SOURCE_DIRECTION or DEST_DIRECTION
                    local chestInfo = getChestInfo(direction)
                    
                    if chestInfo and chestInfo.items then
                        local items = {}
                        for slot, item in pairs(chestInfo.items) do
                            table.insert(items, {slot = slot, item = item})
                        end
                        
                        table.sort(items, function(a, b)
                            return (a.item.name or "") < (b.item.name or "")
                        end)
                        
                        local itemIndex = (y - 5) + 1 + scrollOffset
                        if itemIndex <= #items then
                            local entry = items[itemIndex]
                            showExtractionDialog(chestType, entry.slot, entry.item)
                        end
                    end
                end
            else
                -- Handle single click
                if not handleClick(x, y) then
                    break
                end
            end
            
            lastClickTime = currentTime
            lastClickX, lastClickY = x, y
            
        elseif event == "key" then
            if not handleKey(button) then
                break
            end
        end
    end
end

-- Initialize and run
term.setBackgroundColor(uiColors.bg)
term.setTextColor(colors.text)
clearScreen()

print("Starting Chest Transfer UI...")
sleep(1)

runUI()

-- Cleanup
clearScreen()
term.setCursorPos(1, 1)
print("Chest Transfer UI closed.")
