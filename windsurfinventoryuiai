-- Advanced ComputerCraft Inventory System
-- Features:
-- - Scrollable list of items from all connected inventories
-- - Double-click to extract items with amount selection
-- - Real-time inventory scanning
-- - Configurable output chest
-- - Crafting interface

-- Configuration
local config = {
    scanInterval = 5, -- seconds between scans
    outputChest = "top", -- default output direction
    sortMethod = "count", -- count or name
    debug = false
}

-- State
local items = {} -- Master inventory table
local filteredItems = {} -- Items after filtering
local selectedIndex = 1
local scrollOffset = 0
local lastScanTime = 0
local lastClickTime = 0
local lastClickIndex = 0

-- UI Constants
local W, H = term.getSize()
local ITEMS_PER_PAGE = H - 5
local ITEM_WIDTH = W - 2

-- Color Scheme
local colors = {
    background = colors.black,
    text = colors.white,
    highlight = colors.blue,
    selected = colors.lightBlue,
    warning = colors.red,
    success = colors.green
}

-- Initialize peripherals
local function initPeripherals()
    local peripherals = peripheral.getNames()
    local chests = {}
    
    for _, name in ipairs(peripherals) do
        local pType = peripheral.getType(name)
        if pType == "minecraft:chest" or pType == "minecraft:barrel" or pType == "chest" then
            table.insert(chests, {
                name = name,
                peripheral = peripheral.wrap(name)
            })
        end
    end
    
    return chests
end

-- Scan all connected inventories
local function scanInventories()
    local foundItems = {}
    local chests = initPeripherals()
    
    for _, chest in ipairs(chests) do
        local items = chest.peripheral.list()
        for slot, item in pairs(items) do
            if not foundItems[item.name] then
                foundItems[item.name] = {
                    name = item.name,
                    displayName = item.displayName or item.name:gsub("minecraft:", ""),
                    count = item.count,
                    locations = {{chest = chest.name, slot = slot, count = item.count}}
                }
            else
                foundItems[item.name].count = foundItems[item.name].count + item.count
                table.insert(foundItems[item.name].locations, {
                    chest = chest.name,
                    slot = slot,
                    count = item.count
                })
            end
        end
    end
    
    -- Convert to array and sort
    local itemArray = {}
    for _, item in pairs(foundItems) do
        table.insert(itemArray, item)
    end
    
    table.sort(itemArray, function(a, b)
        if config.sortMethod == "count" then
            return a.count > b.count
        else
            return a.displayName < b.displayName
        end
    end)
    
    return itemArray
end

-- Draw the main inventory UI
local function drawUI()
    term.setBackgroundColor(colors.background)
    term.clear()
    term.setCursorPos(1, 1)
    
    -- Header
    term.setTextColor(colors.highlight)
    print(string.format("Inventory System - %d items found", #filteredItems))
    print(string.rep("-", W))
    
    -- Items list
    for i = 1, math.min(ITEMS_PER_PAGE, #filteredItems - scrollOffset) do
        local idx = i + scrollOffset
        local item = filteredItems[idx]
        
        if idx == selectedIndex then
            term.setBackgroundColor(colors.selected)
        else
            term.setBackgroundColor(colors.background)
        end
        
        term.setCursorPos(1, i + 2)
        term.clearLine()
        
        -- Item name and count
        term.setTextColor(colors.text)
        term.write(string.format(" %-30s x%-5d", item.displayName, item.count))
        
        -- Item details on hover
        if idx == selectedIndex then
            term.setCursorPos(35, i + 2)
            term.write(string.format("(in %d locations)", #item.locations))
        end
    end
    
    -- Scroll indicators
    if scrollOffset > 0 then
        term.setCursorPos(W - 1, 3)
        term.write("↑")
    end
    if scrollOffset + ITEMS_PER_PAGE < #filteredItems then
        term.setCursorPos(W - 1, H - 1)
        term.write("↓")
    end
    
    -- Footer
    term.setBackgroundColor(colors.background)
    term.setTextColor(colors.text)
    term.setCursorPos(1, H)
    term.clearLine()
    term.write("↑/↓: Navigate | Enter: Select | F5: Refresh | Q: Quit")
end

-- Show item extraction dialog
local function showExtractDialog(item)
    local dialogW, dialogH = 40, 8
    local x, y = math.floor((W - dialogW) / 2), math.floor((H - dialogH) / 2)
    
    -- Dialog background
    paintutils.drawFilledBox(x, y, x + dialogW - 1, y + dialogH - 1, colors.lightGray)
    paintutils.drawBox(x, y, x + dialogW - 1, y + dialogH - 1, colors.black)
    
    -- Title
    term.setCursorPos(x + 2, y + 1)
    term.setTextColor(colors.black)
    term.write("Extract Items")
    
    -- Item info
    term.setCursorPos(x + 2, y + 3)
    term.write(string.format("Item: %s", item.displayName))
    term.setCursorPos(x + 2, y + 4)
    term.write(string.format("Available: %d", item.count))
    
    -- Amount input
    term.setCursorPos(x + 2, y + 6)
    term.write("Amount: [        ]")
    
    -- Buttons
    paintutils.drawBox(x + 5, y + dialogH - 3, x + 15, y + dialogH - 2, colors.black)
    term.setCursorPos(x + 7, y + dialogH - 3)
    term.write("Extract")
    
    paintutils.drawBox(x + 20, y + dialogH - 3, x + 30, y + dialogH - 2, colors.black)
    term.setCursorPos(x + 23, y + dialogH - 3)
    term.write("Cancel")
    
    -- TODO: Implement amount input and extraction logic
end

-- Main loop
local function main()
    local running = true
    
    while running do
        local currentTime = os.clock()
        if currentTime - lastScanTime > config.scanInterval then
            filteredItems = scanInventories()
            lastScanTime = currentTime
        end
        
        drawUI()
        
        local event, key, x, y = os.pullEvent()
        
        if event == "key" then
            if key == keys.up and selectedIndex > 1 then
                selectedIndex = selectedIndex - 1
                if selectedIndex <= scrollOffset then
                    scrollOffset = math.max(0, scrollOffset - 1)
                end
            elseif key == keys.down and selectedIndex < #filteredItems then
                selectedIndex = selectedIndex + 1
                if selectedIndex > scrollOffset + ITEMS_PER_PAGE then
                    scrollOffset = scrollOffset + 1
                end
            elseif key == keys.enter and selectedIndex > 0 and selectedIndex <= #filteredItems then
                showExtractDialog(filteredItems[selectedIndex])
            elseif key == keys.f5 then
                filteredItems = scanInventories()
            elseif key == keys.q then
                running = false
            end
        elseif event == "mouse_click" then
            -- Handle mouse clicks for item selection
            if y >= 3 and y < H - 1 and x >= 1 and x <= W - 2 then
                local clickIndex = y - 2 + scrollOffset
                if clickIndex <= #filteredItems then
                    -- Check for double click
                    local currentTime = os.clock()
                    if lastClickIndex == clickIndex and currentTime - lastClickTime < 0.5 then
                        showExtractDialog(filteredItems[clickIndex])
                    end
                    selectedIndex = clickIndex
                    lastClickTime = currentTime
                    lastClickIndex = clickIndex
                end
            end
        end
    end
    
    -- Cleanup
    term.setBackgroundColor(colors.black)
    term.clear()
    term.setCursorPos(1, 1)
end

-- Initialize and run
term.clear()
filteredItems = scanInventories()
main()
