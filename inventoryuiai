-- ComputerCraft Chest Transfer UI
-- Multi-Source to Single Destination Transfer System
-- Supports both direct connections and wired modems

-- Load configuration
local config = {}
if fs.exists("chest_config.lua") then
    local configFile = fs.open("chest_config.lua", "r")
    local configCode = configFile.readAll()
    configFile.close()
    local configFunc = load(configCode)
    if configFunc then
        config = configFunc() or {}
    end
end

-- Configuration
local DEST_DIRECTION = config.dest or "right"
local DEST_NAME = config.destName or nil
local SOURCE_NAMES = config.sourceNames or {}  -- List of source chest names
local AUTO_DISCOVER = config.autoDiscover or true

-- UI State
local currentView = "main" -- main, sources, dest, extract
local selectedSourceIndex = 1
local scrollOffset = 0
local maxDisplayItems = 10
local sourceChests = {}

-- Color definitions
local BLACK = 32768
local BLUE = 2048
local WHITE = 1
local YELLOW = 4
local GREEN = 8192
local RED = 16384
local LIME = 8
local ORANGE = 16

-- Get terminal dimensions
local w, h = term.getSize()

-- Function to find all chest-like peripherals
local function findAllChests()
    local peripherals = peripheral.getNames()
    local chests = {}
    
    for _, name in pairs(peripherals) do
        local pType = peripheral.getType(name)
        
        -- Check if it's a chest-like inventory
        if pType == "minecraft:chest" or 
           pType == "minecraft:trapped_chest" or
           pType == "minecraft:barrel" or
           pType == "minecraft:shulker_box" or
           string.find(pType, "chest") or
           string.find(pType, "barrel") then
            
            local chest = peripheral.wrap(name)
            if chest and chest.list then
                table.insert(chests, {
                    name = name,
                    type = pType,
                    peripheral = chest
                })
            end
        end
    end
    
    return chests
end

-- Function to get destination chest
local function getDestChest()
    -- Try by specific name first
    if DEST_NAME then
        local chest = peripheral.wrap(DEST_NAME)
        if chest and chest.list then
            return chest, DEST_NAME, "wired"
        end
    end
    
    -- Try direct connection
    local chest = peripheral.wrap(DEST_DIRECTION)
    if chest and chest.list then
        return chest, DEST_DIRECTION, "direct"
    end
    
    return nil, nil, "none"
end

-- Function to initialize source chests
local function initializeSourceChests()
    sourceChests = {}
    
    if AUTO_DISCOVER then
        -- Auto-discover all chests except destination
        local allChests = findAllChests()
        local destChest, destId = getDestChest()
        
        for _, chestInfo in ipairs(allChests) do
            -- Don't include the destination chest as a source
            if chestInfo.name ~= destId then
                table.insert(sourceChests, {
                    name = chestInfo.name,
                    type = chestInfo.type,
                    peripheral = chestInfo.peripheral,
                    enabled = true
                })
            end
        end
    else
        -- Use configured source names
        for _, sourceName in ipairs(SOURCE_NAMES) do
            local chest = peripheral.wrap(sourceName)
            if chest and chest.list then
                table.insert(sourceChests, {
                    name = sourceName,
                    type = peripheral.getType(sourceName),
                    peripheral = chest,
                    enabled = true
                })
            end
        end
    end
end

-- Function to get chest info
local function getChestInfo(chest, chestName)
    if not chest then
        return nil, "No chest connected"
    end
    
    local success, items = pcall(function() return chest.list() end)
    if not success then
        return nil, "Failed to read chest inventory"
    end
    
    local itemCount = 0
    local totalItems = 0
    
    for slot, item in pairs(items or {}) do
        itemCount = itemCount + 1
        totalItems = totalItems + item.count
    end
    
    return {
        chest = chest,
        chestId = chestName,
        items = items or {},
        itemCount = itemCount,
        totalItems = totalItems
    }, nil
end

-- Function to clear screen
local function clearScreen()
    term.setBackgroundColor(BLACK)
    term.setTextColor(WHITE)
    term.clear()
    term.setCursorPos(1, 1)
end

-- Function to draw header
local function drawHeader(title)
    term.setBackgroundColor(BLUE)
    term.setTextColor(WHITE)
    term.setCursorPos(1, 1)
    term.clearLine()
    
    local padding = math.floor((w - #title) / 2)
    term.setCursorPos(padding, 1)
    term.write(title)
    
    term.setBackgroundColor(BLACK)
    term.setTextColor(WHITE)
end

-- Function to format item name
local function formatItemName(name, maxLength)
    if not name then return "Unknown Item" end
    
    local displayName = name:gsub("^minecraft:", "")
    displayName = displayName:gsub("_", " ")
    displayName = displayName:gsub("(%a)([%w_']*)", function(first, rest)
        return first:upper() .. rest:lower()
    end)
    
    if #displayName > maxLength then
        displayName = displayName:sub(1, maxLength - 3) .. "..."
    end
    
    return displayName
end

-- Function to draw button
local function drawButton(x, y, text, selected)
    term.setCursorPos(x, y)
    if selected then
        term.setBackgroundColor(YELLOW)
        term.setTextColor(BLACK)
    else
        term.setBackgroundColor(GREEN)
        term.setTextColor(WHITE)
    end
    
    term.write(" " .. text .. " ")
    term.setBackgroundColor(BLACK)
    term.setTextColor(WHITE)
end

-- Function to draw main menu
local function drawMainMenu()
    clearScreen()
    drawHeader("Multi-Source Chest Transfer System")
    
    -- Initialize source chests if not done
    if #sourceChests == 0 then
        initializeSourceChests()
    end
    
    -- Display destination info
    local destChest, destId, destType = getDestChest()
    term.setCursorPos(2, 3)
    term.write("Destination Chest:")
    term.setCursorPos(4, 4)
    if destChest then
        term.setTextColor(LIME)
        local destInfo = getChestInfo(destChest, destId)
        if destInfo then
            term.write("Connected [" .. destId .. "] - " .. destInfo.itemCount .. 
                      " types, " .. destInfo.totalItems .. " items")
        else
            term.write("Connected [" .. destId .. "] - Unable to read inventory")
        end
    else
        term.setTextColor(RED)
        term.write("Not connected - Check configuration")
    end
    
    -- Display source chests summary
    term.setCursorPos(2, 6)
    term.setTextColor(WHITE)
    term.write("Source Chests: " .. #sourceChests .. " found")
    
    local enabledCount = 0
    local totalSourceItems = 0
    for _, source in ipairs(sourceChests) do
        if source.enabled then
            enabledCount = enabledCount + 1
            local info = getChestInfo(source.peripheral, source.name)
            if info then
                totalSourceItems = totalSourceItems + info.totalItems
            end
        end
    end
    
    term.setCursorPos(4, 7)
    term.setTextColor(LIME)
    term.write(enabledCount .. " enabled, " .. totalSourceItems .. " total items to transfer")
    
    term.setTextColor(WHITE)
    
    -- Draw buttons
    drawButton(2, 9, "View Source Chests", false)
    drawButton(2, 11, "View Destination", false)
    drawButton(2, 13, "Transfer All Items", false)
    drawButton(2, 15, "Refresh/Scan", false)
    drawButton(2, 17, "Configure Settings", false)
    drawButton(2, 19, "Exit", false)
    
    -- Instructions
    term.setCursorPos(2, h - 2)
    term.setTextColor(YELLOW)
    term.write("Multi-source transfer: All enabled sources -> Destination")
    term.setCursorPos(2, h - 1)
    term.write("S=Sources, D=Dest, T=Transfer, R=Refresh, C=Config, Q=Quit")
    term.setTextColor(WHITE)
end

-- Function to draw source chests view
local function drawSourcesView()
    clearScreen()
    drawHeader("Source Chests (" .. #sourceChests .. " found)")
    
    if #sourceChests == 0 then
        term.setCursorPos(2, 5)
        term.setTextColor(RED)
        term.write("No source chests found!")
        term.setCursorPos(2, 6)
        term.setTextColor(WHITE)
        term.write("Try refreshing or check your wired connections.")
        return
    end
    
    term.setCursorPos(2, 3)
    term.write("Click on a chest to toggle enabled/disabled:")
    
    local startY = 5
    local displayCount = math.min(maxDisplayItems, #sourceChests - scrollOffset)
    
    for i = 1, displayCount do
        local sourceIndex = i + scrollOffset
        if sourceIndex <= #sourceChests then
            local source = sourceChests[sourceIndex]
            local y = startY + i - 1
            
            term.setCursorPos(2, y)
            
            -- Status indicator
            if source.enabled then
                term.setTextColor(LIME)
                term.write("[✓] ")
            else
                term.setTextColor(RED)
                term.write("[✗] ")
            end
            
            -- Chest name and type
            term.setTextColor(WHITE)
            local displayName = source.name
            if #displayName > 20 then
                displayName = displayName:sub(1, 17) .. "..."
            end
            term.write(displayName)
            
            -- Item count
            local info = getChestInfo(source.peripheral, source.name)
            if info then
                term.setCursorPos(w - 15, y)
                term.setTextColor(YELLOW)
                term.write(info.totalItems .. " items")
            end
            
            term.setTextColor(WHITE)
        end
    end
    
    -- Scroll indicators
    if scrollOffset > 0 then
        term.setCursorPos(w - 1, startY)
        term.setTextColor(YELLOW)
        term.write("^")
    end
    
    if scrollOffset + maxDisplayItems < #sourceChests then
        term.setCursorPos(w - 1, startY + maxDisplayItems - 1)
        term.setTextColor(YELLOW)
        term.write("v")
    end
    
    -- Instructions
    term.setCursorPos(2, h - 4)
    term.setTextColor(YELLOW)
    term.write("Click chest to toggle | Up/Down to scroll")
    term.setCursorPos(2, h - 3)
    term.write("A=Enable All | N=Disable All | B=Back")
    
    drawButton(2, h - 5, "Back to Main Menu", false)
    term.setTextColor(WHITE)
end

-- Function to draw destination view
local function drawDestView()
    clearScreen()
    drawHeader("Destination Chest")
    
    local destChest, destId, destType = getDestChest()
    local destInfo, error = getChestInfo(destChest, destId)
    
    if destInfo then
        term.setCursorPos(2, 3)
        term.write("Connection: " .. destType .. " [" .. destId .. "]")
        term.setCursorPos(2, 4)
        term.write("Items: " .. destInfo.itemCount .. " types, " .. destInfo.totalItems .. " total")
        
        -- Show some items
        term.setCursorPos(2, 6)
        term.write("Current inventory:")
        
        local items = {}
        for slot, item in pairs(destInfo.items) do
            table.insert(items, {slot = slot, item = item})
        end
        
        table.sort(items, function(a, b)
            return (a.item.name or "") < (b.item.name or "")
        end)
        
        local displayCount = math.min(10, #items)
        for i = 1, displayCount do
            local entry = items[i]
            local y = 7 + i - 1
            term.setCursorPos(4, y)
            
            local itemName = formatItemName(entry.item.name, 25)
            local count = entry.item.count or 0
            term.write(string.format("%-25s x%d", itemName, count))
        end
        
        if #items > 10 then
            term.setCursorPos(4, 17)
            term.setTextColor(YELLOW)
            term.write("... and " .. (#items - 10) .. " more item types")
            term.setTextColor(WHITE)
        end
    else
        term.setCursorPos(2, 5)
        term.setTextColor(RED)
        term.write("Error: " .. (error or "Unknown error"))
        term.setTextColor(WHITE)
    end
    
    drawButton(2, h - 3, "Back to Main Menu", false)
end

-- Function to transfer all items from all enabled sources
local function transferAllItems()
    local destChest, destId = getDestChest()
    if not destChest then
        return 0, "Destination chest not found"
    end
    
    local totalTransferred = 0
    local errors = {}
    
    for i, source in ipairs(sourceChests) do
        if source.enabled then
            local sourceInfo = getChestInfo(source.peripheral, source.name)
            if sourceInfo then
                for slot, item in pairs(sourceInfo.items) do
                    local transferred = source.peripheral.pushItems(destId, slot)
                    totalTransferred = totalTransferred + transferred
                    
                    if transferred == 0 and item.count > 0 then
                        table.insert(errors, "Failed to transfer " .. item.name .. " from " .. source.name)
                    end
                end
            end
        end
    end
    
    return totalTransferred, errors
end

-- Function to show transfer progress
local function showTransferProgress()
    clearScreen()
    drawHeader("Transfer in Progress...")
    
    term.setCursorPos(2, 5)
    term.write("Transferring items from all enabled sources...")
    
    local transferred, errors = transferAllItems()
    
    term.setCursorPos(2, 7)
    if transferred > 0 then
        term.setTextColor(LIME)
        term.write("Successfully transferred " .. transferred .. " items!")
    else
        term.setTextColor(RED)
        term.write("No items were transferred.")
    end
    
    if type(errors) == "table" and #errors > 0 then
        term.setCursorPos(2, 9)
        term.setTextColor(YELLOW)
        term.write("Warnings:")
        for i, error in ipairs(errors) do
            if i <= 5 then -- Show max 5 errors
                term.setCursorPos(4, 9 + i)
                term.setTextColor(ORANGE)
                term.write(error)
            end
        end
        if #errors > 5 then
            term.setCursorPos(4, 15)
            term.write("... and " .. (#errors - 5) .. " more issues")
        end
    end
    
    term.setCursorPos(2, h - 2)
    term.setTextColor(WHITE)
    term.write("Press any key to continue...")
    os.pullEvent("key")
end

-- Function to handle mouse clicks
local function handleClick(x, y)
    if currentView == "main" then
        if y == 9 and x >= 2 and x <= 20 then -- View Sources
            currentView = "sources"
            scrollOffset = 0
        elseif y == 11 and x >= 2 and x <= 18 then -- View Destination
            currentView = "dest"
        elseif y == 13 and x >= 2 and x <= 20 then -- Transfer All
            showTransferProgress()
        elseif y == 15 and x >= 2 and x <= 15 then -- Refresh
            sourceChests = {}
            initializeSourceChests()
        elseif y == 17 and x >= 2 and x <= 20 then -- Configure
            shell.run("edit", "chest_config.lua")
        elseif y == 19 and x >= 2 and x <= 8 then -- Exit
            return false
        end
    elseif currentView == "sources" then
        local startY = 5
        if y >= startY and y < startY + maxDisplayItems then
            local sourceIndex = (y - startY) + 1 + scrollOffset
            if sourceIndex <= #sourceChests then
                -- Toggle enabled status
                sourceChests[sourceIndex].enabled = not sourceChests[sourceIndex].enabled
            end
        elseif y == h - 5 and x >= 2 and x <= 20 then -- Back button
            currentView = "main"
        end
    elseif currentView == "dest" then
        if y == h - 3 and x >= 2 and x <= 20 then -- Back button
            currentView = "main"
        end
    end
    
    return true
end

-- Function to handle keyboard input
local function handleKey(key)
    if key == keys.q then
        return false
    elseif key == keys.b then
        currentView = "main"
    elseif key == keys.s and currentView == "main" then
        currentView = "sources"
        scrollOffset = 0
    elseif key == keys.d and currentView == "main" then
        currentView = "dest"
    elseif key == keys.r and currentView == "main" then
        sourceChests = {}
        initializeSourceChests()
    elseif key == keys.t then
        showTransferProgress()
    elseif key == keys.up and currentView == "sources" then
        scrollOffset = math.max(0, scrollOffset - 1)
    elseif key == keys.down and currentView == "sources" then
        scrollOffset = math.min(#sourceChests - maxDisplayItems, scrollOffset + 1)
    elseif key == keys.a and currentView == "sources" then -- Enable all
        for _, source in ipairs(sourceChests) do
            source.enabled = true
        end
    elseif key == keys.n and currentView == "sources" then -- Disable all
        for _, source in ipairs(sourceChests) do
            source.enabled = false
        end
    end
    
    return true
end

-- Main UI loop
local function runUI()
    while true do
        if currentView == "main" then
            drawMainMenu()
        elseif currentView == "sources" then
            drawSourcesView()
        elseif currentView == "dest" then
            drawDestView()
        end
        
        local event, button, x, y = os.pullEvent()
        
        if event == "mouse_click" then
            if not handleClick(x, y) then
                break
            end
        elseif event == "key" then
            if not handleKey(button) then
                break
            end
        end
    end
end

-- Initialize and run
term.setBackgroundColor(BLACK)
term.setTextColor(WHITE)
clearScreen()

print("Starting Multi-Source Chest Transfer System...")
sleep(1)

runUI()

-- Cleanup
clearScreen()
term.setCursorPos(1, 1)
print("Multi-Source Transfer System closed.")
term.setTextColor(WHITE)
